// Mocks generated by Mockito 5.4.5 from annotations
// in yandex_homework_1/test/transaction_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:yandex_homework_1/data/datasources/backup_ds.dart' as _i6;
import 'package:yandex_homework_1/data/datasources/hive_transaction_ds.dart'
    as _i3;
import 'package:yandex_homework_1/data/repositories/api_transaction_repository.dart'
    as _i5;
import 'package:yandex_homework_1/domain/entities/transaction.dart' as _i2;
import 'package:yandex_homework_1/domain/repositories/transaction_repository.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAppTransaction_0 extends _i1.SmartFake
    implements _i2.AppTransaction {
  _FakeAppTransaction_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [HiveTransactionDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockHiveTransactionDataSource extends _i1.Mock
    implements _i3.HiveTransactionDataSource {
  MockHiveTransactionDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.AppTransaction>> getAll() =>
      (super.noSuchMethod(
            Invocation.method(#getAll, []),
            returnValue: _i4.Future<List<_i2.AppTransaction>>.value(
              <_i2.AppTransaction>[],
            ),
          )
          as _i4.Future<List<_i2.AppTransaction>>);

  @override
  _i4.Future<void> put(_i2.AppTransaction? tx) =>
      (super.noSuchMethod(
            Invocation.method(#put, [tx]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> delete(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.AppTransaction?> getById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getById, [id]),
            returnValue: _i4.Future<_i2.AppTransaction?>.value(),
          )
          as _i4.Future<_i2.AppTransaction?>);

  @override
  _i4.Future<void> boxClearAndPutAll(List<_i2.AppTransaction>? list) =>
      (super.noSuchMethod(
            Invocation.method(#boxClearAndPutAll, [list]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [ApiTransactionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiTransactionRepository extends _i1.Mock
    implements _i5.ApiTransactionRepository {
  MockApiTransactionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.AppTransaction> getTransactionById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getTransactionById, [id]),
            returnValue: _i4.Future<_i2.AppTransaction>.value(
              _FakeAppTransaction_0(
                this,
                Invocation.method(#getTransactionById, [id]),
              ),
            ),
          )
          as _i4.Future<_i2.AppTransaction>);

  @override
  _i4.Future<_i2.AppTransaction> createTransaction(_i2.AppTransaction? t) =>
      (super.noSuchMethod(
            Invocation.method(#createTransaction, [t]),
            returnValue: _i4.Future<_i2.AppTransaction>.value(
              _FakeAppTransaction_0(
                this,
                Invocation.method(#createTransaction, [t]),
              ),
            ),
          )
          as _i4.Future<_i2.AppTransaction>);

  @override
  _i4.Future<_i2.AppTransaction> updateTransaction(_i2.AppTransaction? t) =>
      (super.noSuchMethod(
            Invocation.method(#updateTransaction, [t]),
            returnValue: _i4.Future<_i2.AppTransaction>.value(
              _FakeAppTransaction_0(
                this,
                Invocation.method(#updateTransaction, [t]),
              ),
            ),
          )
          as _i4.Future<_i2.AppTransaction>);

  @override
  _i4.Future<void> deleteTransaction(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTransaction, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.AppTransaction>> getTransactionsByAccountPeriod({
    required int? accountId,
    required DateTime? from,
    required DateTime? to,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getTransactionsByAccountPeriod, [], {
              #accountId: accountId,
              #from: from,
              #to: to,
            }),
            returnValue: _i4.Future<List<_i2.AppTransaction>>.value(
              <_i2.AppTransaction>[],
            ),
          )
          as _i4.Future<List<_i2.AppTransaction>>);
}

/// A class which mocks [BackupDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockBackupDataSource extends _i1.Mock implements _i6.BackupDataSource {
  MockBackupDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> addCreateOperation(_i2.AppTransaction? t) =>
      (super.noSuchMethod(
            Invocation.method(#addCreateOperation, [t]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> removeCreateOperation(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#removeCreateOperation, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> addUpdateOperation(_i2.AppTransaction? t) =>
      (super.noSuchMethod(
            Invocation.method(#addUpdateOperation, [t]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> removeUpdateOperation(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#removeUpdateOperation, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> addDeleteOperation(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#addDeleteOperation, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> removeDeleteOperation(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#removeDeleteOperation, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> syncPending(
    _i7.TransactionRepository? remote,
    _i3.HiveTransactionDataSource? local,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#syncPending, [remote, local]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
